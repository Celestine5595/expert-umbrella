
/* 两个简单排序 */     

void Bubble_Sort( ElementType A[], int N )
{/* 冒泡排序 */
    int P, i, flag;
    ElementType temp;
    
    for ( P=N-1; P>=0; P-- ){
        flag = 0;
        for ( i=0; i<p; i++ ){ /* 一趟冒泡 */
            if ( A[i] > A[i+1] ){
                temp = A[i+1];
                A[i+1] = A[i];
                A[i] = temp;
                flag = 1;/* 标识发生了交换 */
            }
        }
        if ( flag == 0 ) break;/* 全程无交换 */
    }
}

void InsertionSort( ElementType A[], int N )
{ /* 插入排序 */
     int P, i;
     ElementType temp;
      
     for ( P=1; P<N; P++ ) {
         temp = A[P]; /* 取出未排序序列中的第一个元素*/
         for ( i=P; i>0 && A[i-1]>temp; i-- ){
             A[i] = A[i-1]; /*依次与已排序序列中元素比较并右移*/
         }
         A[i] = temp; /* 放进合适的位置 */
     }
}

/* 
 * 顺序O(N)
 * 逆序O(N^2)
 
    时间复杂度下界

   定理：任意N个不同元素组成的序列平均具有N(N-1)/4个逆序对(Invertion)
   
   定理：任何仅以交换相邻两元素来排序的算法，其平均时间复杂度为O(N^2)
        →意味着如果要提高算法效率，就要每次交换不止一个元素，即每次交换相隔较远的两个元素
        
   插入排序T(N,I) = O(N+I)  如果序列基本有序，则插入排序简单高效 */
