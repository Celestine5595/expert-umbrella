#include <stdio.h>
#include <stdlib.h>

typedef struct GNote *PtrToGNote;
struct GNote {
    int Nv; /* 顶点数 */
    int Ne; /* 边数 */
    WeightType G[MaxVertexNum][MaxVertexNum];
    DataType Data[MaxVertexNum]; /* 存顶点数据 */
};
typedef PtrToGNote MGraph; /* 以邻接矩阵存储的图类型 */

/* MGraph初始化 */

/* 1°初始化一个有VertexNum个顶点但没有边的图 */
typedef int Vertex; /* 用顶点下标表示顶点，为整型 */
MGraph CreatGraph (int VertexNum)
{
    Vertex V, W;
    MGraph Graph;
    
    Graph = (MGraph)malloc(sizeof(struct GNote));
    Graph->Nv = VertexNum;
    Graph->Ne = 0;
    
    /* 默认顶点编号从0开始，一直到(Graph->Nv - 1) */
    for (V=0; V<Graph->Nv; V++)
        for (W=0; W<Graph->Nv; W++)
            Graph->G[V][W] = 0; /* 或INFINITY */
    
    return Graph;      
}

/* 2°向MGrap中插入边 */
typedef struct ENode *PtrToENode;
struct ENode {
    Vertex V1, V2; /* 有向边<V1, V2> */
    WeightType Weight; /* 权重 */
};
typedef PtrToENode Edge;

void InsertEdge (MGraph, Edge E)
{
    /* 插入边<V1, V2>　*/
    Graph->G[E->V1][E->V2] = E->Weight;
    /* 若是无向图，还要插入边<V2, V1>　*/
    Graph->G[E->V2][E->V1] = E->Weight;
}

/** 
 *  输入格式：
 *  Nv Ne
 *  V1 V2 Weight
 *  ......
 */     


MGraph BuildGraph ()
{
    MGraph Graph;
    Edge E;
    Vertex V;
    int Nv, i;
    
    scanf("%d", &Nv);
    Graph = CreatGraph(Nv);
    scanf("%d", &(Graph->Ne));
    
    if (Graph->Ne != 0){
        E = (Edge)malloc(sizeof(struct ENode));
        for (i=0; i<Graph->Ne; i++){
            scanf("%d %d %d", &E->V1, &E->V2, &E->Weight);
            InsertEdge(Graph, E);
        }
    }
    /* 如果顶点有数据的话，读入数据 */
    for (V=0; V<Graph->Nv; V++){
        scanf("%c", &(Graph->Data[V]));
    }
    
    return Graph;
}

***********************************************************

/* 简单实现 */

int G[MaxN][MaxN], Nv, Ne;
void BuildGraph()
{
    int i, j, v1, v2, w;
    
    scanf("%d", Nv);
    for (i=0; i<Nv; i++)
        for (j=0; j<Nv; j++)
            G[i][j] = 0;
    scanf("%d", &Ne);
    for (i=0; i<Ne; i++){
        scanf("%d %d %d", &v1, &v2, &w);
        G[v1][v2] = w;
        G[v2][v1] = w;
    }
}
